{"version":3,"file":"webm-parser.min.js","sources":["../src/vint.js","../src/logging.js","../src/helpers.js","../src/constants.js","../src/element.js","../src/elements/header.js","../src/elements/seek-head.js","../src/elements/tracks.js","../src/elements/cues.js","../src/elements/cluster.js","../src/elements/segment.js","../src/index.js","../src/parser.js"],"sourcesContent":["import { warn } from \"./logging\"\r\n\r\nexport default class VInt\r\n{\r\n    constructor(value, bytesCount) {\r\n        this.value = value\r\n        this.bytesCount = bytesCount\r\n        this.bytes = []\r\n    }\r\n\r\n    /**\r\n    * Parses data size (variable integer)\r\n    * @param {Uint8Array} bytes \r\n    * @return {int}\r\n    */\r\n   static parse(bytes) {\r\n       let len = Math.min(bytes.length, 8)\r\n       let binary = ''\r\n       for (let i = 0; i < len; i++) {\r\n           binary += bytes[i].toString(2).padStart(8, '0')\r\n       }\r\n\r\n       // Check for undefined value.\r\n       if (binary === '0000000111111111111111111111111111111111111111111111111111111111') {\r\n            return new VInt(-1, 8)\r\n       }\r\n\r\n       // For one byte\r\n       if (binary.length === 8 || binary[0] === '1') {\r\n           return new VInt(parseInt('0' + binary.slice(1, 8), 2), 1)\r\n\r\n       // For two bytes   \r\n       } else if (binary.length === 16 || binary[1] === '1') {\r\n           return new VInt(parseInt('00' + binary.slice(2, 16), 2), 2)\r\n\r\n       // For three bytes    \r\n       } else if (binary.length === 24 || binary[2] === '1') {\r\n           return new VInt(parseInt('000' + binary.slice(3, 24), 2), 3)\r\n\r\n       // For four bytes\r\n       } else if (binary.length === 32 || binary[3] === '1') {\r\n           return new VInt(parseInt('0000' + binary.slice(4, 32), 2), 4)\r\n\r\n       // For five bytes\r\n       } else if (binary[4] === '1') {\r\n           return new VInt(parseInt('00000' + binary.slice(5, 40), 2), 5)\r\n       }\r\n\r\n       warn('Unable to parse VInt (' + binary + ')')\r\n       return new VInt(parseInt(binary, 2), bytes.length)\r\n   }\r\n\r\n\r\n   static createBytes(value) {\r\n        if (value < 0 || value > Math.pow(2, 53)) {\r\n            throw new Error(\"Unrepresentable value: \" + value)\r\n        }\r\n        for (var length = 1; length <= 8; length++) {\r\n            if (value < Math.pow(2, 7 * length) - 1) {\r\n                break\r\n            }\r\n        }\r\n        var buffer = new Uint8Array(length)\r\n        for (var i = 1; i <= length; i++) {\r\n            var b = value & 0xFF\r\n            buffer[length - i] = b\r\n            value -= b\r\n            value /= Math.pow(2, 8)\r\n        }\r\n        buffer[0] = buffer[0] | (1 << (8 - length))\r\n        return buffer\r\n    }\r\n}\r\n","import { LOG_PREFIX, DEBUG_MODE } from \"./constants\"\r\n\r\n\r\nexport function log() {\r\n    if (DEBUG_MODE) {\r\n        console.log(LOG_PREFIX, 'font-weight: bold; color: #fa066b', ...arguments)\r\n    }\r\n}\r\n\r\nexport function warn() {\r\n    if (DEBUG_MODE) {\r\n        console.warn(LOG_PREFIX, 'font-weight: bold; color: #fa066b', ...arguments)\r\n    }\r\n}\r\n\r\nexport function error() {\r\n    console.error(LOG_PREFIX, 'font-weight: bold; color: #fa066b', ...arguments)\r\n}","import { log } from './logging';\r\n/**\r\n * Prints array of unsigned integers as hex\r\n * @param {Uint8Array} bytes \r\n * @param {string} prefix \r\n */\r\nexport function printInHex(bytes, prefix) {\r\n    if (prefix === undefined) prefix = '';\r\n    let str = '';\r\n    for (let i = 0, len = bytes.length; i < len; i++) {\r\n        str += bytes[i].toString(16).padStart(2, '0').toUpperCase() + ' ';\r\n    }\r\n    log(prefix, str);\r\n}\r\n\r\n\r\n/**\r\n * Converts integer to array of bytes\r\n * @param {integer} int \r\n */\r\nexport function intToBytes(int) {\r\n    let arr = new Uint8Array([\r\n            (int & 0xff000000) >> 24,\r\n            (int & 0x00ff0000) >> 16,\r\n            (int & 0x0000ff00) >> 8,\r\n            (int & 0x000000ff)\r\n    ]);\r\n\r\n    let res = [];\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        if (arr[i] !== 0 || res.length) {\r\n            res.push(arr[i]);\r\n        }\r\n    }\r\n\r\n    return res;\r\n}","export const DEBUG_MODE = true\r\nexport const LOG_PREFIX = '%c WebM Parser:'\r\n\r\n\r\n// EBML elements types.\r\nexport const TYPE_MASTER = 'master' // Master element\r\nexport const TYPE_INT    = 'int'    // Signed integer. Big-endian, any size (1 - 8 bytes)\r\nexport const TYPE_UINT   = 'uint'   // Unsigned integer. Big-endian, any size (1 - 8 bytes)\r\nexport const TYPE_FLOAT  = 'float'  // Float. Big-endian, defined for 4 and 8 bytes (32, 64 bits)\r\nexport const TYPE_BINARY = 'bin'    // Not interpreted by the parser\r\nexport const TYPE_UTF_8  = 'utf8'   // Unicode string, zero padded when needed (RFC 2279)\r\nexport const TYPE_STRING = 'string' // Printable ASCII (0x20 to 0x7E), zero-padded when needed\r\nexport const TYPE_DATE   = 'date'   /* Signed 8 octets integer in nanoseconds with 0 indicating \r\n                                    the precise beginning of the millennium \r\n                                    (at 2001-01-01T00:00:00,000000000 UTC) */","import { log, warn } from \"./logging\"\r\nimport { printInHex } from './helpers';\r\nimport VInt from './vint';\r\nimport { TYPE_STRING, TYPE_INT, TYPE_UINT, TYPE_BINARY, TYPE_MASTER } from './constants';\r\n\r\n\r\nexport default class WebMElement\r\n{\r\n    constructor(name, type) {\r\n\r\n        Object.defineProperty(this, '_name', {\r\n            enumerable: false,\r\n            writable: true,\r\n            value: name.slice(0, 1).toLowerCase() + name.slice(1)\r\n        })\r\n\r\n        Object.defineProperty(this, '_type', {\r\n            enumerable: false,\r\n            writable: true,\r\n            value: type || WebM.TYPE_UINT\r\n        })\r\n\r\n        Object.defineProperty(this, '_position', {\r\n            enumerable: false,\r\n            writable: true,\r\n            value: undefined\r\n        })\r\n\r\n        Object.defineProperty(this, '_length', {\r\n            enumerable: false,\r\n            writable: true,\r\n            value: undefined\r\n        })\r\n\r\n        Object.defineProperty(this, '_contentLength', {\r\n            enumerable: false,\r\n            writable: true,\r\n            value: undefined\r\n        })\r\n\r\n        Object.defineProperty(this, '_availableElements', {\r\n            enumerable: false,\r\n            writable: true,\r\n            value: []\r\n        })\r\n\r\n        Object.defineProperty(this, 'is' + name, {\r\n            enumerable: false,\r\n            writable: true,\r\n            value: true\r\n        })\r\n\r\n        Object.defineProperty(this, 'EBML_ID', {\r\n            enumerable: false,\r\n            writable: true,\r\n            value: []\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Uint8Array} bytes \r\n     * @param {int} offset \r\n     * @param {bool} onlyTry If true no logging will be done on fail.\r\n     * @return {bool} Returns true on if EBML ID is presented. Please make data check by yourself.\r\n     */\r\n    parse(bytes, offset, onlyTry) {\r\n        log(\"Parsing \" + this._name + \" ...\")\r\n\r\n        // Set default values\r\n        if (offset === undefined) offset = 0\r\n        if (onlyTry === undefined) onlyTry = false\r\n\r\n        // Check for EBML ID\r\n        let len = Math.min(this.EBML_ID.length, bytes.length - offset)\r\n        try {\r\n            if (len < this.EBML_ID.length) {\r\n                throw 'Unable to parse ' + this._name + ': Too few bytes'\r\n            }\r\n\r\n            for (let i = 0, len = this.EBML_ID.length; i < len; i++) {\r\n                if (bytes[offset + i] !== this.EBML_ID[i]) {\r\n                    throw 'Unable to parse ' + this._name + ': ID doesn\\'t match'\r\n                }\r\n            }\r\n        } catch(e) {\r\n            if (!onlyTry) {\r\n                printInHex(bytes.slice(offset - 10, offset + 10))\r\n                let given = []\r\n                let id = []\r\n                for (let i = 0; i < len; i++) {\r\n                    given.push(bytes[offset + i].toString(16).toUpperCase())\r\n                }\r\n                for (let i = 0; i < this.EBML_ID.length; i++) {\r\n                    id.push(this.EBML_ID[i].toString(16).toUpperCase())\r\n                }\r\n                warn(e, 'Given: [' + given.join(' '), ']   ID: [', id.join(' ') + ']')\r\n            }\r\n            return false;\r\n        }\r\n        \r\n        \r\n        // Set meta-data of the element.\r\n        this._position = offset - 1\r\n        if (this._position < 0) this._position = 0;\r\n        offset += this.EBML_ID.length\r\n        let contentSize = VInt.parse(bytes.slice(offset, offset + 8))\r\n        offset += contentSize.bytesCount\r\n        this._contentLength = contentSize.value\r\n        this._length = this.EBML_ID.length + contentSize.bytesCount + (contentSize.value >= 0 ? contentSize.value : 0)\r\n\r\n        // Parse content depending on element type.\r\n        let sliceLen = contentSize.value >= 0 ? contentSize.value : bytes.length - offset\r\n        switch(this._type)\r\n        {\r\n            case TYPE_STRING:\r\n                this.value = new TextDecoder(\"utf-8\")\r\n                .decode(bytes.slice(offset, offset + sliceLen))\r\n                break\r\n                \r\n            case TYPE_INT:\r\n                this.value = VInt.parse(bytes.slice(offset, offset + sliceLen)).value\r\n                break\r\n\r\n            case TYPE_UINT:\r\n                this.value = VInt.parse(bytes.slice(offset, offset + sliceLen)).value\r\n                break\r\n\r\n            case TYPE_BINARY:\r\n                this.value = bytes.slice(offset, offset + sliceLen)\r\n                break\r\n\r\n            case TYPE_MASTER:\r\n                let maxTries = 1000\r\n                let elements = this._availableElements.slice(0)\r\n                let totalParsed = 0\r\n                do {\r\n                    totalParsed = 0\r\n                    \r\n                    for (let i = 0, len = elements.length; i < len; i++) {\r\n                        let el = new elements[i]()\r\n                        if (el.parse(bytes, offset, true)) {\r\n                            elements.splice(i, 1).slice(0)\r\n                            this[el._name] = el\r\n                            offset += el._length\r\n                            if (this._contentLength < 0 && el._length > 0) {\r\n                                this._length += el._length\r\n                            }\r\n                            totalParsed++\r\n                            break;\r\n                        }\r\n                    }\r\n                } while(maxTries > 0 && totalParsed > 0 && elements.length > 0)\r\n        }\r\n        this.onParsingDone(bytes, offset)\r\n        return true\r\n    }\r\n\r\n    onParsingDone(bytes, offset) {\r\n        // This method may be overridden in sub-class\r\n    }\r\n\r\n    /**\r\n     * Parses data sequence of elements in the given property.\r\n     * @param {string} propName \r\n     * @param {function} constructor \r\n     * @param {Uint8Array} bytes \r\n     * @param {int} offset \r\n     */\r\n    parseChildren(propName, constructor, bytes, offset) {\r\n        log('Parsing children (' + constructor.name + ')')\r\n        do {\r\n            let el = new constructor()\r\n            if (el.parse(bytes, offset, true)) {\r\n                offset += el._length\r\n                this._length += el._length\r\n                this[propName].push(el)\r\n                continue;\r\n            }\r\n            break\r\n        } while(true)\r\n    }\r\n}","import WebMElement from '../element'\r\nimport { TYPE_MASTER, TYPE_UINT } from \"../constants\"\r\n\r\n\r\n// Represents first EBML element with meta-information\r\nexport class WebMHeader extends WebMElement\r\n{\r\n    constructor() {\r\n        super('Header', TYPE_MASTER)\r\n\r\n        this._availableElements = [\r\n            WebMVersion, \r\n            WebMReadVersion,\r\n            WebMMaxIDLength\r\n        ]\r\n    \r\n        this.EBML_ID = [26, 69, 223, 163] // HEX: 1A 45 DF A3\r\n    }\r\n}\r\n\r\n\r\nexport class WebMVersion extends WebMElement\r\n{\r\n    constructor() {\r\n        super('Version', TYPE_UINT)\r\n        this.value = undefined\r\n        this.EBML_ID = [66, 134] // HEX: 42 86\r\n    }\r\n}\r\n\r\n\r\nexport class WebMReadVersion extends WebMElement\r\n{\r\n    constructor() {\r\n        super('ReadVersion', TYPE_UINT)\r\n        this.value = undefined\r\n        this.EBML_ID = [66, 247] // HEX: 42 F7\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class WebMMaxIDLength extends WebMElement\r\n{\r\n    constructor() {\r\n        super('MaxIDLength', TYPE_UINT)\r\n        this.value = undefined\r\n        this.EBML_ID = [66, 242] // HEX: 42 F2\r\n    }\r\n}","import WebMElement from '../element'\r\nimport { TYPE_MASTER, TYPE_UINT, TYPE_BINARY } from \"../constants\"\r\n\r\n\r\nexport class WebMSeekHead extends WebMElement\r\n{\r\n    constructor() {\r\n        super('SeekHead', TYPE_MASTER)\r\n\r\n        this.seeks = []\r\n        this.EBML_ID = [17, 77, 155, 116] // HEX: 11 4D 9B 74\r\n    }\r\n\r\n    onParsingDone(bytes, offset) {\r\n        this.parseChildren('seeks', WebMSeek, bytes, offset)\r\n    }\r\n}\r\n\r\n\r\nexport class WebMSeek extends WebMElement\r\n{\r\n    constructor() {\r\n        super('Seek', TYPE_MASTER)\r\n        this._availableElements = [\r\n            WebMSeekId,\r\n            WebMSeekPosition\r\n        ];\r\n        this.EBML_ID = [77, 187] // HEX: 4D BB\r\n    }\r\n}\r\n\r\n\r\nexport class WebMSeekId extends WebMElement\r\n{\r\n    constructor() {\r\n        super('SeekId', TYPE_BINARY)\r\n        this.EBML_ID = [83, 171] // HEX: 53 AB\r\n    }\r\n}\r\n\r\n\r\nexport class WebMSeekPosition extends WebMElement\r\n{\r\n    constructor() {\r\n        super('SeekPosition', TYPE_UINT)\r\n        this.EBML_ID = [83, 172] // HEX: 53 AC\r\n    }\r\n}","import WebMElement from '../element'\r\nimport { TYPE_MASTER, TYPE_UINT } from \"../constants\"\r\n\r\n\r\nexport class WebMTracks extends WebMElement\r\n{\r\n    constructor() {\r\n        super('Tracks', TYPE_MASTER)\r\n\r\n        this.entries = []\r\n\r\n        this.EBML_ID = [22, 84, 174, 107] // HEX: 16 54 AE 6B\r\n    }\r\n\r\n    onParsingDone(bytes, offset) {\r\n        this.parseChildren('entries', WebMTrackEntry, bytes, offset)\r\n    }\r\n}\r\n\r\n\r\nexport class WebMTrackEntry extends WebMElement\r\n{\r\n    constructor() {\r\n        super('TrackEntry', TYPE_MASTER)\r\n\r\n        this._availableElements = [\r\n            WebMTrackNumber,\r\n            WebMTrackUID,\r\n            WebMVideo,\r\n            WebMAudio\r\n        ]\r\n        \r\n        this.EBML_ID = [174] // HEX: AE\r\n    }\r\n}\r\n\r\n\r\nexport class WebMTrackUID extends WebMElement\r\n{\r\n    constructor() {\r\n        super('TrackUID', TYPE_UINT)\r\n        this.EBML_ID = [115, 197] // HEX: 73 C5\r\n    }\r\n}\r\n\r\n\r\nexport class WebMTrackNumber extends WebMElement\r\n{\r\n    constructor() {\r\n        super('TrackNumber', TYPE_UINT)\r\n        this.EBML_ID = [215] // HEX: D7\r\n    }\r\n}\r\n\r\n\r\n\r\nexport class WebMVideo extends WebMElement\r\n{\r\n    constructor() {\r\n        super('Video', TYPE_MASTER)\r\n        this.EBML_ID = [224] // HEX: E0\r\n    }\r\n}\r\n\r\n\r\nexport class WebMAudio extends WebMElement\r\n{\r\n    constructor() {\r\n        super('Audio', TYPE_MASTER)\r\n        this.EBML_ID = [225] // HEX: E1\r\n    }\r\n}","import WebMElement from '../element'\r\nimport { TYPE_MASTER } from \"../constants\"\r\n\r\nexport class WebMCues extends WebMElement\r\n{\r\n    constructor() {\r\n        super('Cues', TYPE_MASTER)\r\n        this.EBML_ID = [28, 83, 187, 107] // HEX: 1C 53 BB 6B\r\n    }\r\n}","import WebMElement from '../element'\r\nimport { TYPE_MASTER, TYPE_UINT, TYPE_BINARY } from \"../constants\"\r\nimport { intToBytes } from '../helpers';\r\nimport VInt from '../vint';\r\n\r\n\r\nexport class WebMCluster extends WebMElement\r\n{\r\n    constructor() {\r\n        super('Cluster', TYPE_MASTER)\r\n\r\n        this._availableElements = [\r\n            WebMClusterTimestamp\r\n        ]\r\n\r\n        this.simpleBlocks = []\r\n\r\n        this.EBML_ID = [31, 67, 182, 117] // HEX: 1F 43 B6 75\r\n    }\r\n\r\n    onParsingDone(bytes, offset) {\r\n        this.parseChildren('simpleBlocks', WebMSimpleBlock, bytes, offset)\r\n    }\r\n\r\n    /**\r\n     * Regenerates bytes of the cluster.\r\n     * IMPORTANT! This method is in development yet.\r\n     */\r\n    regenerateBytes() {\r\n\r\n        let f = 0;\r\n        let cap = this.EBML_ID.length;\r\n        cap += this.timestamp._length;\r\n        \r\n        for (let i = 0, len = this.simpleBlocks.length; i < len; i++) {\r\n            cap += this.simpleBlocks[i]._length;\r\n        }\r\n\r\n        let b = new Uint8Array(cap);\r\n\r\n        for (let i = 0, len = this.EBML_ID.length; i < len; i++) {\r\n            b[f++] = this.EBML_ID[i];\r\n        }\r\n\r\n        b[f++] = 1;\r\n        b[f++] = 255;\r\n        b[f++] = 255;\r\n        b[f++] = 255;\r\n        b[f++] = 255;\r\n        b[f++] = 255;\r\n        b[f++] = 255;\r\n        b[f++] = 255;\r\n\r\n        // Timestamp.\r\n        for (let i = 0, len = this.timestamp.EBML_ID.length; i < len; i++) {\r\n            b[f++] = this.timestamp.EBML_ID[i];\r\n        }\r\n        \r\n        let lenBytes = VInt.createBytes(this.timestamp._contentLength);\r\n        for (let k = 0; k < lenBytes.length; k++) {\r\n            b[f++] = lenBytes[k];\r\n        }\r\n\r\n        let lenBytes2 = WebM.intToBytes(this.timestamp.value);\r\n        for (let k = 0; k < lenBytes2.length; k++) {\r\n            b[f++] = lenBytes2[k];\r\n        }\r\n\r\n        for (let i = 0, len = this.simpleBlocks.length; i < len; i++) {\r\n            let block = this.simpleBlocks[i];\r\n    \r\n            \r\n            for (let j = 0, len2 = block.EBML_ID.length; j < len2; j++) {\r\n                b[f++] = block.EBML_ID[j];\r\n            }\r\n\r\n            let lenBytes = VInt.createBytes(block._contentLength);\r\n            for (let k = 0; k < lenBytes.length; k++) {\r\n                b[f++] = lenBytes[k];\r\n            }\r\n            \r\n\r\n            for (let j = 0, len2 = block.value.length; j < len2; j++) {\r\n                b[f++] = block.value[j];\r\n            }\r\n        }\r\n\r\n        return b;\r\n    }\r\n}\r\n\r\n\r\nexport class WebMClusterTimestamp extends WebMElement\r\n{\r\n    constructor() {\r\n        super('Timestamp', TYPE_UINT)\r\n        this.EBML_ID = [231] // HEX: E7\r\n    }\r\n\r\n\r\n    setValue(value) {\r\n        this.value = value\r\n        this._contentLength = Math.max(intToBytes(value).length, 1)\r\n        this._length = this.EBML_ID.length + 1 + this._contentLength\r\n    }\r\n}\r\n\r\n\r\nexport class WebMSimpleBlock extends WebMElement\r\n{\r\n    constructor() {\r\n        super('SimpleBlock', TYPE_BINARY)\r\n        this.EBML_ID = [163] // HEX: A3\r\n    }\r\n}","import WebMElement from '../element'\r\nimport { TYPE_MASTER, TYPE_BINARY } from \"../constants\"\r\nimport { WebMSeekHead } from \"./seek-head\"\r\nimport { WebMTracks } from \"./tracks\"\r\nimport { WebMCues } from \"./cues\"\r\nimport { WebMCluster } from './cluster'\r\n\r\n\r\nexport class WebMSegment extends WebMElement\r\n{\r\n    constructor() {\r\n        super('Segment', TYPE_MASTER)\r\n\r\n        this._availableElements = [\r\n            WebMSeekHead,\r\n            WebMSegmentInfo,\r\n            WebMTracks,\r\n            WebMCues\r\n        ]\r\n\r\n        this.clusters = []\r\n\r\n        this.EBML_ID = [24, 83, 128, 103] // HEX: 18 53 80 67\r\n    }\r\n\r\n    onParsingDone(bytes, offset) {\r\n        this.parseChildren('clusters', WebMCluster, bytes, offset)\r\n    }\r\n\r\n\r\n    getLastCluster() {\r\n        return this.clusters[this.clusters.length - 1]\r\n    }\r\n}\r\n\r\n\r\nexport class WebMSegmentInfo extends WebMElement\r\n{\r\n    constructor() {\r\n        super('SegmentInfo', TYPE_MASTER)\r\n\r\n        this._availableElements = [\r\n            WebMSegmentUID\r\n        ]\r\n\r\n        this.EBML_ID = [21, 73, 169, 102] // HEX: 15 49 A9 66\r\n    }\r\n}\r\n\r\nexport class WebMSegmentUID extends WebMElement\r\n{\r\n    constructor() {\r\n        super('SegmentUID', TYPE_BINARY)\r\n        this.EBML_ID = [115, 164] // HEX: 73 A4\r\n    }\r\n}\r\n","import WebM from './parser'\r\nimport { WebMCluster } from './elements/cluster'\r\nimport { WebMHeader } from './elements/header'\r\nimport { WebMSegment } from './elements/segment'\r\n\r\n\r\n\r\nwindow.WebM = WebM\r\nwindow.WebMHeader = WebMHeader\r\nwindow.WebMSegment = WebMSegment\r\nwindow.WebMCluster = WebMCluster\r\n","import { log } from \"./logging\"\r\nimport { WebMHeader } from \"./elements/header\"\r\nimport { WebMSegment } from \"./elements/segment\"\r\n\r\nexport default class WebM\r\n{\r\n    constructor() {\r\n        this.header = new WebMHeader()   // EMBL info\r\n        this.segment = new WebMSegment() // Segment info\r\n    }\r\n\r\n    /**\r\n     * Array buffer that contains video data.\r\n     * @param {Uint8Array} buffer \r\n     */\r\n    parse(bytes) {\r\n        log(\"Started...\")\r\n\r\n        // Parse header (EMBL element)\r\n        this.header.parse(bytes)\r\n        \r\n        // Parse segment element\r\n        if (this.header._length) {\r\n            this.segment.parse(bytes, this.header._length)\r\n        }\r\n    }\r\n}"],"names":["Math","min","log","console","LOG_PREFIX","arguments","warn","printInHex","bytes","prefix","str","i","len","length","toString","padStart","toUpperCase","intToBytes","int","arr","Uint8Array","res","push","TYPE_MASTER","TYPE_UINT","TYPE_BINARY","VInt","constructor","value","bytesCount","parse","binary","parseInt","slice","createBytes","pow","Error","b","buffer","WebMElement","name","type","Object","defineProperty","enumerable","writable","toLowerCase","WebM","offset","onlyTry","_name","EBML_ID","e","given","id","join","_position","contentSize","_contentLength","_length","sliceLen","_type","TextDecoder","decode","elements","_availableElements","totalParsed","el","splice","onParsingDone","parseChildren","propName","WebMHeader","WebMVersion","WebMReadVersion","WebMMaxIDLength","WebMSeekHead","seeks","WebMSeek","WebMSeekId","WebMSeekPosition","WebMTracks","entries","WebMTrackEntry","WebMTrackNumber","WebMTrackUID","WebMVideo","WebMAudio","WebMCues","WebMCluster","WebMClusterTimestamp","simpleBlocks","WebMSimpleBlock","regenerateBytes","f","cap","timestamp","lenBytes","k","lenBytes2","block","j","len2","setValue","max","WebMSegment","WebMSegmentInfo","clusters","getLastCluster","WebMSegmentUID","window","header","segment"],"mappings":"+BAgBiBA,IAAI,CAACC,ICbf,QAASC,CAAAA,CAAT,EAAe,CAEdC,OAAO,CAACD,GAAR,CAAYE,CAAZ,CAAwB,mCAAxB,CAA6D,GAAGC,SAAhE,CAEP,CAEM,QAASC,CAAAA,CAAT,EAAgB,CAEfH,OAAO,CAACG,IAAR,CAAaF,CAAb,CAAyB,mCAAzB,CAA8D,GAAGC,SAAjE,CAEP,CCPM,QAASE,CAAAA,CAAT,CAAoBC,CAApB,CAA2BC,CAA3B,CAAmC,CAClCA,CAAM,SAD4B,GACZA,CAAM,CAAG,EADG,EAEtC,GAAIC,CAAAA,CAAG,CAAG,EAAV,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAR,CAAWC,CAAG,CAAGJ,CAAK,CAACK,MAA5B,CAAoCF,CAAC,CAAGC,CAAxC,CAA6CD,CAAC,EAA9C,CACID,CAAG,EAAIF,CAAK,CAACG,CAAD,CAAL,CAASG,QAAT,CAAkB,EAAlB,EAAsBC,QAAtB,CAA+B,CAA/B,CAAkC,GAAlC,EAAuCC,WAAvC,GAAuD,GAA9D,CAEJd,CAAG,CAACO,CAAD,CAASC,CAAT,CACN,CAOM,QAASO,CAAAA,CAAT,CAAoBC,CAApB,CAAyB,IACxBC,CAAAA,CAAG,CAAG,GAAIC,CAAAA,UAAJ,CAAe,CACjB,CAAO,UAAN,CAAAF,CAAD,GAAsB,EADL,CAEjB,CAAO,QAAN,CAAAA,CAAD,GAAsB,EAFL,CAGjB,CAAO,KAAN,CAAAA,CAAD,GAAsB,CAHL,CAIV,GAAN,CAAAA,CAJgB,CAAf,CADkB,CAQxBG,CAAG,CAAG,EARkB,CAU5B,IAAK,GAAIV,CAAAA,CAAC,CAAG,CAAb,CAAoB,CAAJ,CAAAA,CAAhB,CAAuBA,CAAC,EAAxB,EACmB,CAAX,GAAAQ,CAAG,CAACR,CAAD,CAAH,EAAgBU,CAAG,CAACR,MAD5B,GAEQQ,CAAG,CAACC,IAAJ,CAASH,CAAG,CAACR,CAAD,CAAZ,CAFR,CAMA,MAAOU,CAAAA,OCnCEjB,CAAAA,CAAU,CAAG,kBAIbmB,CAAW,CAAG,SAEdC,CAAS,CAAK,OAEdC,CAAW,CAAG,MHPZ,KAAMC,CAAAA,CACrB,CACIC,WAAW,CAACC,CAAD,CAAQC,CAAR,CAAoB,CAC3B,KAAKD,KAAL,CAAaA,CADc,CAE3B,KAAKC,UAAL,CAAkBA,CAFS,CAG3B,KAAKrB,KAAL,CAAa,EAChB,CAOF,MAAOsB,CAAAA,KAAP,CAAatB,CAAb,CAAoB,IACZI,CAAAA,CAAG,CAAG,EAASJ,CAAK,CAACK,MAAf,CAAuB,CAAvB,CADM,CAEZkB,CAAM,CAAG,EAFG,CAGhB,IAAK,GAAIpB,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGC,CAApB,CAAyBD,CAAC,EAA1B,CACIoB,CAAM,EAAIvB,CAAK,CAACG,CAAD,CAAL,CAASG,QAAT,CAAkB,CAAlB,EAAqBC,QAArB,CAA8B,CAA9B,CAAiC,GAAjC,CAAV,CAJY,MAQD,kEAAX,GAAAgB,CARY,CASJ,GAAIL,CAAAA,CAAJ,CAAS,CAAC,CAAV,CAAa,CAAb,CATI,CAaM,CAAlB,GAAAK,CAAM,CAAClB,MAAP,EAAqC,GAAd,GAAAkB,CAAM,CAAC,CAAD,CAbjB,CAcL,GAAIL,CAAAA,CAAJ,CAASM,QAAQ,CAAC,IAAMD,CAAM,CAACE,KAAP,CAAa,CAAb,CAAgB,CAAhB,CAAP,CAA2B,CAA3B,CAAjB,CAAgD,CAAhD,CAdK,CAiBa,EAAlB,GAAAF,CAAM,CAAClB,MAAP,EAAsC,GAAd,GAAAkB,CAAM,CAAC,CAAD,CAjBzB,CAkBL,GAAIL,CAAAA,CAAJ,CAASM,QAAQ,CAAC,KAAOD,CAAM,CAACE,KAAP,CAAa,CAAb,CAAgB,EAAhB,CAAR,CAA6B,CAA7B,CAAjB,CAAkD,CAAlD,CAlBK,CAqBa,EAAlB,GAAAF,CAAM,CAAClB,MAAP,EAAsC,GAAd,GAAAkB,CAAM,CAAC,CAAD,CArBzB,CAsBL,GAAIL,CAAAA,CAAJ,CAASM,QAAQ,CAAC,MAAQD,CAAM,CAACE,KAAP,CAAa,CAAb,CAAgB,EAAhB,CAAT,CAA8B,CAA9B,CAAjB,CAAmD,CAAnD,CAtBK,CAyBa,EAAlB,GAAAF,CAAM,CAAClB,MAAP,EAAsC,GAAd,GAAAkB,CAAM,CAAC,CAAD,CAzBzB,CA0BL,GAAIL,CAAAA,CAAJ,CAASM,QAAQ,CAAC,OAASD,CAAM,CAACE,KAAP,CAAa,CAAb,CAAgB,EAAhB,CAAV,CAA+B,CAA/B,CAAjB,CAAoD,CAApD,CA1BK,CA6BS,GAAd,GAAAF,CAAM,CAAC,CAAD,CA7BD,CA8BL,GAAIL,CAAAA,CAAJ,CAASM,QAAQ,CAAC,QAAUD,CAAM,CAACE,KAAP,CAAa,CAAb,CAAgB,EAAhB,CAAX,CAAgC,CAAhC,CAAjB,CAAqD,CAArD,CA9BK,EAiChB3B,CAAI,CAAC,yBAA2ByB,CAA3B,CAAoC,GAArC,CAjCY,CAkCT,GAAIL,CAAAA,CAAJ,CAASM,QAAQ,CAACD,CAAD,CAAS,CAAT,CAAjB,CAA8BvB,CAAK,CAACK,MAApC,CAlCS,CAmCnB,CAGD,MAAOqB,CAAAA,WAAP,CAAmBN,CAAnB,CAA0B,OACI5B,IAAI,CAACmC,GADT,CACrB,GAAY,CAAR,CAAAP,CAAK,EAAQA,CAAK,CAAG,EAAS,CAAT,CAAY,EAAZ,CAAzB,CACI,KAAM,IAAIQ,CAAAA,KAAJ,CAAU,0BAA4BR,CAAtC,CAAN,CAEJ,IAAK,GAAIf,CAAAA,CAAM,CAAG,CAAlB,CAA+B,CAAV,EAAAA,CAArB,IACQe,CAAK,CAAG,EAAS,CAAT,CAAY,EAAIf,CAAhB,EAA0B,CAD1C,EAAkCA,CAAM,EAAxC,EAMA,OACQwB,CAAAA,CADR,CADIC,CAAM,CAAG,GAAIlB,CAAAA,UAAJ,CAAeP,CAAf,CACb,CAASF,CAAC,CAAG,CAAb,CAAgBA,CAAC,EAAIE,CAArB,CAA6BF,CAAC,EAA9B,CACQ0B,CADR,CACoB,GAAR,CAAAT,CADZ,CAEIU,CAAM,CAACzB,CAAM,CAAGF,CAAV,CAAN,CAAqB0B,CAFzB,CAGIT,CAAK,EAAIS,CAHb,CAIIT,CAAK,EAAI,EAAS,CAAT,CAAY,CAAZ,CAJb,CAOA,MADAU,CAAAA,CAAM,CAAC,CAAD,CACN,EADyB,GAAM,EAAIzB,CACnC,CAAOyB,CACV,CApEL,CIGe,KAAMC,CAAAA,CACrB,CACIZ,WAAW,CAACa,CAAD,CAAOC,CAAP,CAAa,CAEpBC,MAAM,CAACC,cAAP,CAAsB,IAAtB,CAA4B,OAA5B,CAAqC,CACjCC,UAAU,GADuB,CAEjCC,QAAQ,GAFyB,CAGjCjB,KAAK,CAAEY,CAAI,CAACP,KAAL,CAAW,CAAX,CAAc,CAAd,EAAiBa,WAAjB,GAAiCN,CAAI,CAACP,KAAL,CAAW,CAAX,CAHP,CAArC,CAFoB,CAQpBS,MAAM,CAACC,cAAP,CAAsB,IAAtB,CAA4B,OAA5B,CAAqC,CACjCC,UAAU,GADuB,CAEjCC,QAAQ,GAFyB,CAGjCjB,KAAK,CAAEa,CAAI,EAAIM,IAAI,CAACvB,SAHa,CAArC,CARoB,CAcpBkB,MAAM,CAACC,cAAP,CAAsB,IAAtB,CAA4B,WAA5B,CAAyC,CACrCC,UAAU,GAD2B,CAErCC,QAAQ,GAF6B,CAGrCjB,KAAK,OAHgC,CAAzC,CAdoB,CAoBpBc,MAAM,CAACC,cAAP,CAAsB,IAAtB,CAA4B,SAA5B,CAAuC,CACnCC,UAAU,GADyB,CAEnCC,QAAQ,GAF2B,CAGnCjB,KAAK,OAH8B,CAAvC,CApBoB,CA0BpBc,MAAM,CAACC,cAAP,CAAsB,IAAtB,CAA4B,gBAA5B,CAA8C,CAC1CC,UAAU,GADgC,CAE1CC,QAAQ,GAFkC,CAG1CjB,KAAK,OAHqC,CAA9C,CA1BoB,CAgCpBc,MAAM,CAACC,cAAP,CAAsB,IAAtB,CAA4B,oBAA5B,CAAkD,CAC9CC,UAAU,GADoC,CAE9CC,QAAQ,GAFsC,CAG9CjB,KAAK,CAAE,EAHuC,CAAlD,CAhCoB,CAsCpBc,MAAM,CAACC,cAAP,CAAsB,IAAtB,CAA4B,KAAOH,CAAnC,CAAyC,CACrCI,UAAU,GAD2B,CAErCC,QAAQ,GAF6B,CAGrCjB,KAAK,GAHgC,CAAzC,CAtCoB,CA4CpBc,MAAM,CAACC,cAAP,CAAsB,IAAtB,CAA4B,SAA5B,CAAuC,CACnCC,UAAU,GADyB,CAEnCC,QAAQ,GAF2B,CAGnCjB,KAAK,CAAE,EAH4B,CAAvC,CAKH,CASDE,KAAK,CAACtB,CAAD,CAAQwC,CAAR,CAAgBC,CAAhB,CAAyB,CAC1B/C,CAAG,CAAC,WAAa,KAAKgD,KAAlB,CAA0B,MAA3B,CADuB,CAItB,SAAAF,CAJsB,GAIAA,CAAM,CAAG,CAJT,EAKtB,SAAAC,CALsB,GAKCA,CAAO,GALR,EAQ1B,GAAIrC,CAAAA,CAAG,CAAG,EAAS,KAAKuC,OAAL,CAAatC,MAAtB,CAA8BL,CAAK,CAACK,MAAN,CAAemC,CAA7C,CAAV,CACA,GAAI,CACA,GAAIpC,CAAG,CAAG,KAAKuC,OAAL,CAAatC,MAAvB,CACI,KAAM,mBAAqB,KAAKqC,KAA1B,CAAkC,iBAAxC,CAGJ,IAAK,GAAIvC,CAAAA,CAAC,CAAG,CAAR,CAAWC,CAAG,CAAG,KAAKuC,OAAL,CAAatC,MAAnC,CAA2CF,CAAC,CAAGC,CAA/C,CAAoDD,CAAC,EAArD,CACI,GAAIH,CAAK,CAACwC,CAAM,CAAGrC,CAAV,CAAL,GAAsB,KAAKwC,OAAL,CAAaxC,CAAb,CAA1B,CACI,KAAM,mBAAqB,KAAKuC,KAA1B,CAAkC,oBAGnD,CAAC,MAAME,CAAN,CAAS,CACP,GAAI,CAACH,CAAL,CAAc,CACV1C,CAAU,CAACC,CAAK,CAACyB,KAAN,CAAYe,CAAM,CAAG,EAArB,CAAyBA,CAAM,CAAG,EAAlC,CAAD,CADA,IAENK,CAAAA,CAAK,CAAG,EAFF,CAGNC,CAAE,CAAG,EAHC,CAIV,IAAK,GAAI3C,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGC,CAApB,CAAyBD,CAAC,EAA1B,CACI0C,CAAK,CAAC/B,IAAN,CAAWd,CAAK,CAACwC,CAAM,CAAGrC,CAAV,CAAL,CAAkBG,QAAlB,CAA2B,EAA3B,EAA+BE,WAA/B,EAAX,EAEJ,IAAK,GAAIL,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,KAAKwC,OAAL,CAAatC,MAAjC,CAAyCF,CAAC,EAA1C,CACI2C,CAAE,CAAChC,IAAH,CAAQ,KAAK6B,OAAL,CAAaxC,CAAb,EAAgBG,QAAhB,CAAyB,EAAzB,EAA6BE,WAA7B,EAAR,EAEJV,CAAI,CAAC8C,CAAD,CAAI,WAAaC,CAAK,CAACE,IAAN,CAAW,GAAX,CAAjB,CAAkC,WAAlC,CAA+CD,CAAE,CAACC,IAAH,CAAQ,GAAR,EAAe,GAA9D,CACP,CACD,QACH,CAID,KAAKC,SAAL,CAAiBR,CAAM,CAAG,CArCA,CAsCL,CAAjB,MAAKQ,SAtCiB,GAsCF,KAAKA,SAAL,CAAiB,CAtCf,EAuC1BR,CAAM,EAAI,KAAKG,OAAL,CAAatC,MAvCG,CAwC1B,GAAI4C,CAAAA,CAAW,CAAG/B,CAAI,CAACI,KAAL,CAAWtB,CAAK,CAACyB,KAAN,CAAYe,CAAZ,CAAoBA,CAAM,CAAG,CAA7B,CAAX,CAAlB,CACAA,CAAM,EAAIS,CAAW,CAAC5B,UAzCI,CA0C1B,KAAK6B,cAAL,CAAsBD,CAAW,CAAC7B,KA1CR,CA2C1B,KAAK+B,OAAL,CAAe,KAAKR,OAAL,CAAatC,MAAb,CAAsB4C,CAAW,CAAC5B,UAAlC,EAAqE,CAArB,EAAA4B,CAAW,CAAC7B,KAAZ,CAAyB6B,CAAW,CAAC7B,KAArC,CAA6C,CAA7F,CA3CW,CA8C1B,GAAIgC,CAAAA,CAAQ,CAAwB,CAArB,EAAAH,CAAW,CAAC7B,KAAZ,CAAyB6B,CAAW,CAAC7B,KAArC,CAA6CpB,CAAK,CAACK,MAAN,CAAemC,CAA3E,CACA,OAAO,KAAKa,KAAZ,EAEI,IDxGe,QCwGf,CACI,KAAKjC,KAAL,CAAa,GAAIkC,CAAAA,WAAJ,CAAgB,OAAhB,EACZC,MADY,CACLvD,CAAK,CAACyB,KAAN,CAAYe,CAAZ,CAAoBA,CAAM,CAAGY,CAA7B,CADK,CADjB,CAGI,MAEJ,IDlHe,KCkHf,CACI,KAAKhC,KAAL,CAAaF,CAAI,CAACI,KAAL,CAAWtB,CAAK,CAACyB,KAAN,CAAYe,CAAZ,CAAoBA,CAAM,CAAGY,CAA7B,CAAX,EAAmDhC,KADpE,CAEI,MAEJ,IAAKJ,CAAAA,CAAL,CACI,KAAKI,KAAL,CAAaF,CAAI,CAACI,KAAL,CAAWtB,CAAK,CAACyB,KAAN,CAAYe,CAAZ,CAAoBA,CAAM,CAAGY,CAA7B,CAAX,EAAmDhC,KADpE,CAEI,MAEJ,IAAKH,CAAAA,CAAL,CACI,KAAKG,KAAL,CAAapB,CAAK,CAACyB,KAAN,CAAYe,CAAZ,CAAoBA,CAAM,CAAGY,CAA7B,CADjB,CAEI,MAEJ,IAAKrC,CAAAA,CAAL,IAEQyC,CAAAA,CAAQ,CAAG,KAAKC,kBAAL,CAAwBhC,KAAxB,CAA8B,CAA9B,CAFnB,CAGQiC,CAAW,CAAG,CAHtB,CAII,EAAG,CACCA,CAAW,CAAG,CADf,CAGC,IAAK,GACGC,CAAAA,CADH,CAAIxD,CAAC,CAAG,CAAR,CAAWC,CAAG,CAAGoD,CAAQ,CAACnD,MAA/B,CAAuCF,CAAC,CAAGC,CAA3C,CAAgDD,CAAC,EAAjD,CAEI,GADIwD,CACJ,CADS,GAAIH,CAAAA,CAAQ,CAACrD,CAAD,CACrB,CAAIwD,CAAE,CAACrC,KAAH,CAAStB,CAAT,CAAgBwC,CAAhB,IAAJ,CAAmC,CAC/BgB,CAAQ,CAACI,MAAT,CAAgBzD,CAAhB,CAAmB,CAAnB,EAAsBsB,KAAtB,CAA4B,CAA5B,CAD+B,CAE/B,KAAKkC,CAAE,CAACjB,KAAR,EAAiBiB,CAFc,CAG/BnB,CAAM,EAAImB,CAAE,CAACR,OAHkB,CAIL,CAAtB,MAAKD,cAAL,EAAwC,CAAb,CAAAS,CAAE,CAACR,OAJH,GAK3B,KAAKA,OAAL,EAAgBQ,CAAE,CAACR,OALQ,EAO/BO,CAAW,EAPoB,CAQ/B,KACH,CAER,CAhBD,MAgBsC,CAAd,CAAAA,CAAW,EAA0B,CAAlB,CAAAF,CAAQ,CAACnD,MAhBpD,EAvBR,CA0CA,MADA,MAAKwD,aAAL,CAAmB7D,CAAnB,CAA0BwC,CAA1B,CACA,GACH,CAEDqB,aAAa,CAAC7D,CAAD,CAAQwC,CAAR,CAAgB,CAE5B,CASDsB,aAAa,CAACC,CAAD,CAAW5C,CAAX,CAAwBnB,CAAxB,CAA+BwC,CAA/B,CAAuC,CAChD9C,CAAG,CAAC,qBAAuByB,CAAW,CAACa,IAAnC,CAA0C,GAA3C,CAD6C,CAEhD,EAAG,CACC,GAAI2B,CAAAA,CAAE,CAAG,GAAIxC,CAAAA,CAAb,CACA,GAAIwC,CAAE,CAACrC,KAAH,CAAStB,CAAT,CAAgBwC,CAAhB,IAAJ,CAAmC,CAC/BA,CAAM,EAAImB,CAAE,CAACR,OADkB,CAE/B,KAAKA,OAAL,EAAgBQ,CAAE,CAACR,OAFY,CAG/B,KAAKY,CAAL,EAAejD,IAAf,CAAoB6C,CAApB,CAH+B,CAI/B,QACH,CACD,KACH,CATD,SAUH,CA9KL,CCFO,KAAMK,CAAAA,CAAN,QAAyBjC,CAAAA,CAChC,CACIZ,WAAW,EAAG,CACV,MAAM,QAAN,CAAgBJ,CAAhB,CADU,CAGV,KAAK0C,kBAAL,CAA0B,CACtBQ,CADsB,CAEtBC,CAFsB,CAGtBC,CAHsB,CAHhB,CASV,KAAKxB,OAAL,CAAe,CAAC,EAAD,CAAK,EAAL,CAAS,GAAT,CAAc,GAAd,CAClB,CAXL,CAeO,KAAMsB,CAAAA,CAAN,QAA0BlC,CAAAA,CACjC,CACIZ,WAAW,EAAG,CACV,MAAM,SAAN,CAAiBH,CAAjB,CADU,CAEV,KAAKI,KAAL,OAFU,CAGV,KAAKuB,OAAL,CAAe,CAAC,EAAD,CAAK,GAAL,CAClB,CALL,CASO,KAAMuB,CAAAA,CAAN,QAA8BnC,CAAAA,CACrC,CACIZ,WAAW,EAAG,CACV,MAAM,aAAN,CAAqBH,CAArB,CADU,CAEV,KAAKI,KAAL,OAFU,CAGV,KAAKuB,OAAL,CAAe,CAAC,EAAD,CAAK,GAAL,CAClB,CALL,CAUO,KAAMwB,CAAAA,CAAN,QAA8BpC,CAAAA,CACrC,CACIZ,WAAW,EAAG,CACV,MAAM,aAAN,CAAqBH,CAArB,CADU,CAEV,KAAKI,KAAL,OAFU,CAGV,KAAKuB,OAAL,CAAe,CAAC,EAAD,CAAK,GAAL,CAClB,CALL,MCvCayB,CAAAA,SAAqBrC,CAAAA,CAClC,CACIZ,WAAW,EAAG,CACV,MAAM,UAAN,CAAkBJ,CAAlB,CADU,CAGV,KAAKsD,KAAL,CAAa,EAHH,CAIV,KAAK1B,OAAL,CAAe,CAAC,EAAD,CAAK,EAAL,CAAS,GAAT,CAAc,GAAd,CAClB,CAEDkB,aAAa,CAAC7D,CAAD,CAAQwC,CAAR,CAAgB,CACzB,KAAKsB,aAAL,CAAmB,OAAnB,CAA4BQ,CAA5B,CAAsCtE,CAAtC,CAA6CwC,CAA7C,CACH,CAVL,CAcO,KAAM8B,CAAAA,CAAN,QAAuBvC,CAAAA,CAC9B,CACIZ,WAAW,EAAG,CACV,MAAM,MAAN,CAAcJ,CAAd,CADU,CAEV,KAAK0C,kBAAL,CAA0B,CACtBc,CADsB,CAEtBC,CAFsB,CAFhB,CAMV,KAAK7B,OAAL,CAAe,CAAC,EAAD,CAAK,GAAL,CAClB,CARL,CAYO,KAAM4B,CAAAA,CAAN,QAAyBxC,CAAAA,CAChC,CACIZ,WAAW,EAAG,CACV,MAAM,QAAN,CAAgBF,CAAhB,CADU,CAEV,KAAK0B,OAAL,CAAe,CAAC,EAAD,CAAK,GAAL,CAClB,CAJL,CAQO,KAAM6B,CAAAA,CAAN,QAA+BzC,CAAAA,CACtC,CACIZ,WAAW,EAAG,CACV,MAAM,cAAN,CAAsBH,CAAtB,CADU,CAEV,KAAK2B,OAAL,CAAe,CAAC,EAAD,CAAK,GAAL,CAClB,CAJL,MCtCa8B,CAAAA,SAAmB1C,CAAAA,CAChC,CACIZ,WAAW,EAAG,CACV,MAAM,QAAN,CAAgBJ,CAAhB,CADU,CAGV,KAAK2D,OAAL,CAAe,EAHL,CAKV,KAAK/B,OAAL,CAAe,CAAC,EAAD,CAAK,EAAL,CAAS,GAAT,CAAc,GAAd,CAClB,CAEDkB,aAAa,CAAC7D,CAAD,CAAQwC,CAAR,CAAgB,CACzB,KAAKsB,aAAL,CAAmB,SAAnB,CAA8Ba,CAA9B,CAA8C3E,CAA9C,CAAqDwC,CAArD,CACH,CAXL,CAeO,KAAMmC,CAAAA,CAAN,QAA6B5C,CAAAA,CACpC,CACIZ,WAAW,EAAG,CACV,MAAM,YAAN,CAAoBJ,CAApB,CADU,CAGV,KAAK0C,kBAAL,CAA0B,CACtBmB,CADsB,CAEtBC,CAFsB,CAGtBC,CAHsB,CAItBC,CAJsB,CAHhB,CAUV,KAAKpC,OAAL,CAAe,CAAC,GAAD,CAClB,CAZL,CAgBO,KAAMkC,CAAAA,CAAN,QAA2B9C,CAAAA,CAClC,CACIZ,WAAW,EAAG,CACV,MAAM,UAAN,CAAkBH,CAAlB,CADU,CAEV,KAAK2B,OAAL,CAAe,CAAC,GAAD,CAAM,GAAN,CAClB,CAJL,CAQO,KAAMiC,CAAAA,CAAN,QAA8B7C,CAAAA,CACrC,CACIZ,WAAW,EAAG,CACV,MAAM,aAAN,CAAqBH,CAArB,CADU,CAEV,KAAK2B,OAAL,CAAe,CAAC,GAAD,CAClB,CAJL,CASO,KAAMmC,CAAAA,CAAN,QAAwB/C,CAAAA,CAC/B,CACIZ,WAAW,EAAG,CACV,MAAM,OAAN,CAAeJ,CAAf,CADU,CAEV,KAAK4B,OAAL,CAAe,CAAC,GAAD,CAClB,CAJL,CAQO,KAAMoC,CAAAA,CAAN,QAAwBhD,CAAAA,CAC/B,CACIZ,WAAW,EAAG,CACV,MAAM,OAAN,CAAeJ,CAAf,CADU,CAEV,KAAK4B,OAAL,CAAe,CAAC,GAAD,CAClB,CAJL,MC/DaqC,CAAAA,SAAiBjD,CAAAA,CAC9B,CACIZ,WAAW,EAAG,CACV,MAAM,MAAN,CAAcJ,CAAd,CADU,CAEV,KAAK4B,OAAL,CAAe,CAAC,EAAD,CAAK,EAAL,CAAS,GAAT,CAAc,GAAd,CAClB,CAJL,MCEasC,CAAAA,SAAoBlD,CAAAA,CACjC,CACIZ,WAAW,EAAG,CACV,MAAM,SAAN,CAAiBJ,CAAjB,CADU,CAGV,KAAK0C,kBAAL,CAA0B,CACtByB,CADsB,CAHhB,CAOV,KAAKC,YAAL,CAAoB,EAPV,CASV,KAAKxC,OAAL,CAAe,CAAC,EAAD,CAAK,EAAL,CAAS,GAAT,CAAc,GAAd,CAClB,CAEDkB,aAAa,CAAC7D,CAAD,CAAQwC,CAAR,CAAgB,CACzB,KAAKsB,aAAL,CAAmB,cAAnB,CAAmCsB,CAAnC,CAAoDpF,CAApD,CAA2DwC,CAA3D,CACH,CAMD6C,eAAe,EAAG,IAEVC,CAAAA,CAAC,CAAG,CAFM,CAGVC,CAAG,CAAG,KAAK5C,OAAL,CAAatC,MAHT,CAIdkF,CAAG,EAAI,KAAKC,SAAL,CAAerC,OAJR,CAMd,IAAK,GAAIhD,CAAAA,CAAC,CAAG,CAAR,CAAWC,CAAG,CAAG,KAAK+E,YAAL,CAAkB9E,MAAxC,CAAgDF,CAAC,CAAGC,CAApD,CAAyDD,CAAC,EAA1D,CACIoF,CAAG,EAAI,KAAKJ,YAAL,CAAkBhF,CAAlB,EAAqBgD,OAA5B,CAGJ,GAAItB,CAAAA,CAAC,CAAG,GAAIjB,CAAAA,UAAJ,CAAe2E,CAAf,CAAR,CAEA,IAAK,GAAIpF,CAAAA,CAAC,CAAG,CAAR,CAAWC,CAAG,CAAG,KAAKuC,OAAL,CAAatC,MAAnC,CAA2CF,CAAC,CAAGC,CAA/C,CAAoDD,CAAC,EAArD,CACI0B,CAAC,CAACyD,CAAC,EAAF,CAAD,CAAS,KAAK3C,OAAL,CAAaxC,CAAb,CAAT,CAGJ0B,CAAC,CAACyD,CAAC,EAAF,CAAD,CAAS,CAhBK,CAiBdzD,CAAC,CAACyD,CAAC,EAAF,CAAD,CAAS,GAjBK,CAkBdzD,CAAC,CAACyD,CAAC,EAAF,CAAD,CAAS,GAlBK,CAmBdzD,CAAC,CAACyD,CAAC,EAAF,CAAD,CAAS,GAnBK,CAoBdzD,CAAC,CAACyD,CAAC,EAAF,CAAD,CAAS,GApBK,CAqBdzD,CAAC,CAACyD,CAAC,EAAF,CAAD,CAAS,GArBK,CAsBdzD,CAAC,CAACyD,CAAC,EAAF,CAAD,CAAS,GAtBK,CAuBdzD,CAAC,CAACyD,CAAC,EAAF,CAAD,CAAS,GAvBK,CA0Bd,IAAK,GAAInF,CAAAA,CAAC,CAAG,CAAR,CAAWC,CAAG,CAAG,KAAKoF,SAAL,CAAe7C,OAAf,CAAuBtC,MAA7C,CAAqDF,CAAC,CAAGC,CAAzD,CAA8DD,CAAC,EAA/D,CACI0B,CAAC,CAACyD,CAAC,EAAF,CAAD,CAAS,KAAKE,SAAL,CAAe7C,OAAf,CAAuBxC,CAAvB,CAAT,CAGJ,GAAIsF,CAAAA,CAAQ,CAAGvE,CAAI,CAACQ,WAAL,CAAiB,KAAK8D,SAAL,CAAetC,cAAhC,CAAf,CACA,IAAK,GAAIwC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,CAAQ,CAACpF,MAA7B,CAAqCqF,CAAC,EAAtC,CACI7D,CAAC,CAACyD,CAAC,EAAF,CAAD,CAASG,CAAQ,CAACC,CAAD,CAAjB,CAGJ,GAAIC,CAAAA,CAAS,CAAGpD,IAAI,CAAC9B,UAAL,CAAgB,KAAK+E,SAAL,CAAepE,KAA/B,CAAhB,CACA,IAAK,GAAIsE,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGC,CAAS,CAACtF,MAA9B,CAAsCqF,CAAC,EAAvC,CACI7D,CAAC,CAACyD,CAAC,EAAF,CAAD,CAASK,CAAS,CAACD,CAAD,CAAlB,CAGJ,IAAK,GACGE,CAAAA,CADH,CAAIzF,CAAC,CAAG,CAAR,CAAWC,CAAG,CAAG,KAAK+E,YAAL,CAAkB9E,MAAxC,CAAgDF,CAAC,CAAGC,CAApD,CAAyDD,CAAC,EAA1D,CAA8D,CACtDyF,CADsD,CAC9C,KAAKT,YAAL,CAAkBhF,CAAlB,CAD8C,CAI1D,IAAK,GAAI0F,CAAAA,CAAC,CAAG,CAAR,CAAWC,CAAI,CAAGF,CAAK,CAACjD,OAAN,CAActC,MAArC,CAA6CwF,CAAC,CAAGC,CAAjD,CAAuDD,CAAC,EAAxD,CACIhE,CAAC,CAACyD,CAAC,EAAF,CAAD,CAASM,CAAK,CAACjD,OAAN,CAAckD,CAAd,CAAT,CAGJ,GAAIJ,CAAAA,CAAQ,CAAGvE,CAAI,CAACQ,WAAL,CAAiBkE,CAAK,CAAC1C,cAAvB,CAAf,CACA,IAAK,GAAIwC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,CAAQ,CAACpF,MAA7B,CAAqCqF,CAAC,EAAtC,CACI7D,CAAC,CAACyD,CAAC,EAAF,CAAD,CAASG,CAAQ,CAACC,CAAD,CAAjB,CAIJ,IAAK,GAAIG,CAAAA,CAAC,CAAG,CAAR,CAAWC,CAAI,CAAGF,CAAK,CAACxE,KAAN,CAAYf,MAAnC,CAA2CwF,CAAC,CAAGC,CAA/C,CAAqDD,CAAC,EAAtD,CACIhE,CAAC,CAACyD,CAAC,EAAF,CAAD,CAASM,CAAK,CAACxE,KAAN,CAAYyE,CAAZ,CAEhB,CAED,MAAOhE,CAAAA,CACV,CAjFL,CAqFO,KAAMqD,CAAAA,CAAN,QAAmCnD,CAAAA,CAC1C,CACIZ,WAAW,EAAG,CACV,MAAM,WAAN,CAAmBH,CAAnB,CADU,CAEV,KAAK2B,OAAL,CAAe,CAAC,GAAD,CAClB,CAGDoD,QAAQ,CAAC3E,CAAD,CAAQ,CACZ,KAAKA,KAAL,CAAaA,CADD,CAEZ,KAAK8B,cAAL,CAAsB1D,IAAI,CAACwG,GAAL,CAASvF,CAAU,CAACW,CAAD,CAAV,CAAkBf,MAA3B,CAAmC,CAAnC,CAFV,CAGZ,KAAK8C,OAAL,CAAe,KAAKR,OAAL,CAAatC,MAAb,CAAsB,CAAtB,CAA0B,KAAK6C,cACjD,CAXL,CAeO,KAAMkC,CAAAA,CAAN,QAA8BrD,CAAAA,CACrC,CACIZ,WAAW,EAAG,CACV,MAAM,aAAN,CAAqBF,CAArB,CADU,CAEV,KAAK0B,OAAL,CAAe,CAAC,GAAD,CAClB,CAJL,MCrGasD,CAAAA,SAAoBlE,CAAAA,CACjC,CACIZ,WAAW,EAAG,CACV,MAAM,SAAN,CAAiBJ,CAAjB,CADU,CAGV,KAAK0C,kBAAL,CAA0B,CACtBW,CADsB,CAEtB8B,CAFsB,CAGtBzB,CAHsB,CAItBO,CAJsB,CAHhB,CAUV,KAAKmB,QAAL,CAAgB,EAVN,CAYV,KAAKxD,OAAL,CAAe,CAAC,EAAD,CAAK,EAAL,CAAS,GAAT,CAAc,GAAd,CAClB,CAEDkB,aAAa,CAAC7D,CAAD,CAAQwC,CAAR,CAAgB,CACzB,KAAKsB,aAAL,CAAmB,UAAnB,CAA+BmB,CAA/B,CAA4CjF,CAA5C,CAAmDwC,CAAnD,CACH,CAGD4D,cAAc,EAAG,CACb,MAAO,MAAKD,QAAL,CAAc,KAAKA,QAAL,CAAc9F,MAAd,CAAuB,CAArC,CACV,CAvBL,CA2BO,KAAM6F,CAAAA,CAAN,QAA8BnE,CAAAA,CACrC,CACIZ,WAAW,EAAG,CACV,MAAM,aAAN,CAAqBJ,CAArB,CADU,CAGV,KAAK0C,kBAAL,CAA0B,CACtB4C,CADsB,CAHhB,CAOV,KAAK1D,OAAL,CAAe,CAAC,EAAD,CAAK,EAAL,CAAS,GAAT,CAAc,GAAd,CAClB,CATL,CAYO,KAAM0D,CAAAA,CAAN,QAA6BtE,CAAAA,CACpC,CACIZ,WAAW,EAAG,CACV,MAAM,YAAN,CAAoBF,CAApB,CADU,CAEV,KAAK0B,OAAL,CAAe,CAAC,GAAD,CAAM,GAAN,CAClB,CAJL,CC3CA2D,MAAM,CAAC/D,IAAP,CCHe,KACf,CACIpB,WAAW,EAAG,CACV,KAAKoF,MAAL,CAAc,GAAIvC,CAAAA,CADR,CAEV,KAAKwC,OAAL,CAAe,GAAIP,CAAAA,CACtB,CAMD3E,KAAK,CAACtB,CAAD,CAAQ,CACTN,CAAG,CAAC,YAAD,CADM,CAIT,KAAK6G,MAAL,CAAYjF,KAAZ,CAAkBtB,CAAlB,CAJS,CAOL,KAAKuG,MAAL,CAAYpD,OAPP,EAQL,KAAKqD,OAAL,CAAalF,KAAb,CAAmBtB,CAAnB,CAA0B,KAAKuG,MAAL,CAAYpD,OAAtC,CAEP,CApBL,EDGAmD,MAAM,CAACtC,UAAP,CAAoBA,EACpBsC,MAAM,CAACL,WAAP,CAAqBA,EACrBK,MAAM,CAACrB,WAAP,CAAqBA"}